{{- $file := .}}
{{- range $service := $file.Services}}
    {{- $InterfaceName := printf "%sServerWithStatus" $service.CamelCaseName}}
    {{- $WrapperName := printf "%sWithStatusServer" $service.CamelCaseName}}
type {{$InterfaceName}} interface {
    {{- range $method := $service.Methods }}
    {{$method.CamelCaseName}}(ctx {{$file.Package "context"}}.Context, in *{{$method.RequestTypeName}}) (*{{$method.ReturnTypeName}}, *{{$file.Package "google.golang.org/grpc/status"}}.Status)
    {{- end}}
}

type {{$WrapperName}} struct {
    wrappedServer {{$InterfaceName}}
}
    {{- range $method := $service.Methods}}

func (s *{{$WrapperName}}) {{$method.CamelCaseName}}(ctx context.Context, in *{{$method.RequestTypeName}}) (*{{$method.ReturnTypeName}}, error) {
    result, err := s.wrappedServer.{{$method.CamelCaseName}}(ctx, in)
    return result, err.Err()
}
    {{- end}}

func New{{$WrapperName}}(wrappedServer {{$InterfaceName}}) *{{$WrapperName}} {
    return &{{$WrapperName}} {
        wrappedServer: wrappedServer,
    }
}
{{- end}}
