{{$service := .}}
{{- $validatingServiceTypeName := printf "Validating%sServer" $service.CamelCaseName}}
type {{$validatingServiceTypeName}} struct {
    wrappedServer {{$service.CamelCaseName}}Server
}
{{- range $index, $method := $service.Methods}}

func (s *{{$validatingServiceTypeName}}) {{$method.CamelCaseName}}(ctx context.Context, in *{{$method.RequestType.Name}}) (*{{$method.ReturnTypeName}}, error) {
    {{- if $method.SkipValidation}}
    // Validation skipped as per skip_validation flag in method {{$method.ProtoName}}
    {{- else if $method.RequestType.SkipValidation}}
    // Validation skipped since {{$method.RequestType.Name}} does not have any validatable fields
    {{- else}}
    if err := in.Validate(); err != nil {
        return nil, {{$service.Package "google.golang.org/grpc/status"}}.Newf({{$service.Package "google.golang.org/grpc/codes"}}.InvalidArgument, "Invalid request: %s", err.Error()).Err()
    }
    {{- end}}
    return s.wrappedServer.{{$method.CamelCaseName}}(ctx, in)
}
{{- end}}

func New{{$validatingServiceTypeName}}(wrappedServer {{$service.CamelCaseName}}Server) *{{$validatingServiceTypeName}} {
    return &Validating{{$service.CamelCaseName}}Server {
        wrappedServer: wrappedServer,
    }
}
