package tasks

import (
	"context"

	"github.com/doublecloud/transfer/internal/logger"
	"github.com/doublecloud/transfer/library/go/core/metrics"
	"github.com/doublecloud/transfer/library/go/core/xerrors"
	"github.com/doublecloud/transfer/pkg/abstract"
	"github.com/doublecloud/transfer/pkg/abstract/coordinator"
	"github.com/doublecloud/transfer/pkg/abstract/model"
	"github.com/doublecloud/transfer/pkg/providers"
)

// UpdateTransfer is system task, generated by transfer update for `Running` transfers with active replication
// `control plane` will prepare `UpdateDataObjectsParams` update transfer and start operation
// `data plane` for all new object we will generate homo-DDL and upload data
// this operation similar to `AddTables` but without endpoint mutation
func UpdateTransfer(ctx context.Context, cp coordinator.Coordinator, transfer model.Transfer, task model.TransferOperation, registry metrics.Registry, objects abstract.UpdateTransferParams) error {
	tables, err := objects.AddedTables()
	if err != nil {
		return xerrors.Errorf("unable to extract added tables: %w", err)
	}
	if transfer.IsTransitional() {
		if !transfer.IncrementOnly() {
			if err := StartJob(ctx, cp, transfer, &task); err != nil {
				return xerrors.Errorf("unable to start worker: %w", err)
			}
			return nil
		}
		if len(tables) > 0 {
			return xerrors.New("transitional transfers does not support data objects edit")
		}
	}
	if len(tables) > 0 {
		logger.Log.Infof("update task with: %v added object (all: %v)", tables, objects)

		if transfer.IsMain() {
			logger.Log.Info("Executing schema update hook on main worker")
			if hook, ok := providers.Source[providers.Updater](logger.Log, registry, cp, &transfer); ok {
				if err := hook.Update(ctx, tables); err != nil {
					return xerrors.Errorf("Cannot run update-transfer hook for %s: %w", transfer.SrcType(), err)
				}
			} else {
				if err := applyAddedTablesSchema(&transfer, registry); err != nil {
					return xerrors.Errorf("Cannot load schema for added table to target: %w", err)
				}
			}
		}
		if !transfer.IncrementOnly() {
			snapshotLoader := NewSnapshotLoader(cp, task.OperationID, &transfer, registry)
			if err := snapshotLoader.UploadTables(ctx, tables, false); err != nil {
				return xerrors.Errorf("failed to upload tables: %w", err)
			}
		}
	}

	if !transfer.IsMain() {
		logger.Log.Infof("UpdateTransfer on secondary has finished, exiting")
		return nil
	}
	return StartJob(ctx, cp, transfer, &task)
}
