// Code generated by MockGen. DO NOT EDIT.
// Source: ./http_client.go
//
// Generated by this command:
//
//	mockgen -source ./http_client.go -package httpclient -destination ./http_client_mock.go
//
// Package httpclient is a generated GoMock package.
package httpclient

import (
	context "context"
	io "io"
	reflect "reflect"

	log "go.ytsaurus.tech/library/go/core/log"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockHTTPClient) Exec(ctx context.Context, lgr log.Logger, host string, query any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", ctx, lgr, host, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec.
func (mr *MockHTTPClientMockRecorder) Exec(ctx, lgr, host, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockHTTPClient)(nil).Exec), ctx, lgr, host, query)
}

// Query mocks base method.
func (m *MockHTTPClient) Query(ctx context.Context, lgr log.Logger, host string, query, res any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", ctx, lgr, host, query, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockHTTPClientMockRecorder) Query(ctx, lgr, host, query, res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockHTTPClient)(nil).Query), ctx, lgr, host, query, res)
}

// QueryStream mocks base method.
func (m *MockHTTPClient) QueryStream(ctx context.Context, lgr log.Logger, host string, query any) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStream", ctx, lgr, host, query)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStream indicates an expected call of QueryStream.
func (mr *MockHTTPClientMockRecorder) QueryStream(ctx, lgr, host, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStream", reflect.TypeOf((*MockHTTPClient)(nil).QueryStream), ctx, lgr, host, query)
}
