version: '3.4'
services:
  # This is an empty container which exits instantly. We need it only to get
  # the base dataplane docker image and to run pg_dump in the container with
  # that image.
  base:
    # Base image for external cloud see at transfer_manager/ci/teamcity/build_docker_image
    # Corresponding Teamcity task:
    # https://teamcity.aw.cloud.yandex.net/buildConfiguration/DataTransfer_BaseDockerImage/12072965
    image: registry.yandex.net/cdc/base:76b933d7bcf62f2e0ce8f106ea9c6ef5b53ba4da@sha256:2e2e87c13102b5b66456db70c9fc1f36301b867b552e34abe1293cb629e23e1a
  tricky-types-pg2pg-source1:
    build:
      context: data/tricky_types_pg2pg/source1/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=5432 -c wal_level=logical
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=5432 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-target1:
    build:
      context: data/tricky_types_pg2pg/target1/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=6432
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=6432 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-source2:
    build:
      context: data/tricky_types_pg2pg/source2/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=5433
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=5433 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-target2:
    image: registry.yandex.net/data-transfer/tests/postgis:13-3.3@sha256:ca4958189b4f1514d9825db3e5d75c0f78c021c3c51916dc442b89883c4429ec
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=6433
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=6433 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-source3:
    build:
      context: data/tricky_types_pg2pg/source3/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=5434
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=5434 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-source4:
    build:
      context: data/tricky_types_pg2pg/source4/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=5435 -c wal_level=logical
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=5435 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2pg-target3:
    image: registry.yandex.net/data-transfer/tests/postgis:13-3.3@sha256:ca4958189b4f1514d9825db3e5d75c0f78c021c3c51916dc442b89883c4429ec
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=6434
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=6434 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  tricky-types-pg2yt-source:
    build:
      context: data/tricky_types_pg2yt/source/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
    entrypoint: docker-entrypoint.sh postgres -c port=7432 -c wal_level=logical # Test case involves replication, so set wal_level = logical
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=7432 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  old-postgres-pg2pg-source:
    build:
      context: data/old_postgres_pg2pg/source/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_HOST_AUTH_METHOD=trust
    entrypoint: docker-entrypoint.sh postgres -c hba_file=/etc/postgresql/pg_hba.conf -c port=8432 -c max_replication_slots=1 -c max_wal_senders=10 -c wal_level=logical # First test case involves replication, so set wal_level = logical
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=8432 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  old-postgres-pg2pg-target:
    image: registry.yandex.net/data-transfer/tests/postgres-wal2json:9.4.26-2.5@sha256:5ca772aae238e7d37315b6e79786ae9526b306f5e1a9e4b7bb1a1a722d3e0952
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_HOST_AUTH_METHOD=trust
    entrypoint: docker-entrypoint.sh postgres -c port=8433
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=8433 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  pg2elasticsearch-source-1:
    container_name: pg2elasticsearch-source-1
    build:
      context: data/pg2elasticsearch/source/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_HOST_AUTH_METHOD=trust
    entrypoint: docker-entrypoint.sh postgres -c port=6789
    healthcheck:
      test: [ 'CMD', 'psql', 'host=localhost port=6789 user=postgres password=123 dbname=postgres', '-c', 'select 1;' ]
      interval: 1s
      retries: 30
  pg2elasticsearch-elastic-target-1:
    image: registry.yandex.net/data-transfer/tests/elasticsearch:7.17.9@sha256:4a601b6ca6bddcfed375752832c5ad23f423d02ee50fbf0c5428ecaaee05e168
    container_name: pg2elasticsearch-elastic-target-1
    network_mode: host
    environment:
      - node.name=es01
      - http.port=9202
      - transport.port=9302
      - cluster.name=es-docker-cluster-1
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s localhost:9202 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
  elastic2pg-elastic-source-1:
    image: registry.yandex.net/data-transfer/tests/elasticsearch:7.17.9@sha256:4a601b6ca6bddcfed375752832c5ad23f423d02ee50fbf0c5428ecaaee05e168
    container_name:  elastic2pg-elastic-source-1
    network_mode: host
    environment:
      - node.name=es01
      - http.port=9203
      - transport.port=9303
      - cluster.name=es-docker-cluster-1
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s localhost:9203 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
  elastic2pg-pg-target-1:
    container_name: elastic2pg-pg-target-1
    build:
      context: data/elastic2pg/target/
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_HOST_AUTH_METHOD=trust
    entrypoint: docker-entrypoint.sh postgres -c port=6790
    healthcheck:
      test: ['CMD', 'psql', 'host=localhost port=6790 user=postgres password=123 dbname=postgres', '-c', 'select 1;']
      interval: 1s
      retries: 30
  pg2kafka2pg-postgres:
    container_name: pg2kafka2pg-postgres
    build:
      context: data/pg2kafka2pg/source
    network_mode: host
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_HOST_AUTH_METHOD=trust
      - MAX_CONNECTIONS=200
    entrypoint: docker-entrypoint.sh postgres -c port=6770
    healthcheck:
      test: [ 'CMD', 'psql', 'host=localhost port=6770 user=postgres password=123 dbname=postgres', '-c', 'select 1;' ]
      interval: 1s
      retries: 30
  zookeeper:
    image: registry.yandex.net/data-transfer/tests/zookeeper:7.3.2@sha256:dcfa960e6292f5c494147190ad999d888d8d163ece9cb3ece49f1ca71c74dfdf
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      start_period: 15s
      interval: 10s
      retries: 30
  kafka:
    image: registry.yandex.net/data-transfer/tests/kafka:7.3.2@sha256:c121cdccca1307bb57d87935beaf290533a73fb3b1246e1a9286461ac67ade79
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"  # Kafka
    environment:
      # Listeners:
      # PLAINTEXT_HOST -> Expose kafka to the host network
      # PLAINTEXT -> Used by kafka for inter broker communication / containers
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://karapace-registry:8081
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Metrics:
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Keep in sync with tests/integration/conftest.py::configure_and_start_kafka
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "local"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_INTER_BROKER_PROTOCOL_VERSION: 2.4
      KAFKA_LOG_CLEANER_ENABLE: "true"
      KAFKA_LOG_MESSAGE_FORMAT_VERSION: 2.4
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_SEGMENT_BYTES: 209715200
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_NUM_NETWORK_THREADS: 112
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_NUM_PARTITIONS: 16
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 6000
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      retries: 30
  karapace-registry:
    image: registry.yandex.net/data-transfer/tests/karapace:3.4.6@sha256:9c1dff6f290a777d587f9ab8319243c70d33538459bf5ceb9aaf7a68441cf1d7
    entrypoint:
      - /bin/bash
      - /opt/karapace/start.sh
      - registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
      - "8083:8081"
    environment:
      KARAPACE_ADVERTISED_HOSTNAME: karapace-registry
      KARAPACE_BOOTSTRAP_URI: kafka:29092
      KARAPACE_PORT: 8081
      KARAPACE_HOST: 0.0.0.0
      KARAPACE_CLIENT_ID: karapace
      KARAPACE_GROUP_ID: karapace-registry
      KARAPACE_MASTER_ELIGIBILITY: "true"
      KARAPACE_TOPIC_NAME: _schemas
      KARAPACE_LOG_LEVEL: WARNING
      KARAPACE_COMPATIBILITY: FULL
    healthcheck:
      test: ls  > /dev/null || exit -1
      start_period: 15s
      interval: 5s
      retries: 30
  karapace-rest:
    image: registry.yandex.net/data-transfer/tests/karapace:3.4.6@sha256:9c1dff6f290a777d587f9ab8319243c70d33538459bf5ceb9aaf7a68441cf1d7
    entrypoint:
      - /bin/bash
      - /opt/karapace/start.sh
      - rest
    depends_on:
      - kafka
      - karapace-registry
    ports:
      - "8082:8082"
    environment:
      KARAPACE_PORT: 8082
      KARAPACE_HOST: 0.0.0.0
      KARAPACE_ADVERTISED_HOSTNAME: karapace-rest
      KARAPACE_BOOTSTRAP_URI: kafka:29092
      KARAPACE_REGISTRY_HOST: karapace-registry
      KARAPACE_REGISTRY_PORT: 8081
      KARAPACE_ADMIN_METADATA_MAX_AGE: 0
      KARAPACE_LOG_LEVEL: WARNING
    healthcheck:
      test: ls  > /dev/null || exit -1
      start_period: 15s
      interval: 5s
      retries: 30
  elastic2elastic-src:
    image: registry.yandex.net/data-transfer/tests/elasticsearch:7.17.9@sha256:4a601b6ca6bddcfed375752832c5ad23f423d02ee50fbf0c5428ecaaee05e168
    container_name: elastic2elastic-src
    network_mode: host
    environment:
      - node.name=es05
      - http.port=9205
      - transport.port=9305
      - cluster.name=es-docker-cluster-5
      - cluster.initial_master_nodes=es05
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s localhost:9205 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
  elastic2elastic-dst:
    image: registry.yandex.net/data-transfer/tests/elasticsearch:7.17.9@sha256:4a601b6ca6bddcfed375752832c5ad23f423d02ee50fbf0c5428ecaaee05e168
    container_name: elastic2elastic-dst
    network_mode: host
    environment:
      - node.name=es06
      - http.port=9206
      - transport.port=9306
      - cluster.name=es-docker-cluster-6
      - cluster.initial_master_nodes=es06
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s localhost:9206 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
  elastic2opensearch-src:
    image: registry.yandex.net/data-transfer/tests/elasticsearch:7.17.9@sha256:4a601b6ca6bddcfed375752832c5ad23f423d02ee50fbf0c5428ecaaee05e168
    container_name: elastic2opensearch-src
    network_mode: host
    environment:
      - node.name=es07
      - http.port=9207
      - transport.port=9307
      - cluster.name=es-docker-cluster-7
      - cluster.initial_master_nodes=es07
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: curl -s localhost:9207 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
  elastic2opensearch-dst:
    image:  registry.yandex.net/data-transfer/tests/opensearch/opensearch-2.1.0@sha256:ea52f7b04ebb2ec2712513b0e56f561d4e6227eb4e42a0002193bde62a77d329
    container_name: opensearch-node1
    network_mode: host

    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.seed_hosts=opensearch-node1
      - cluster.initial_master_nodes=opensearch-node1
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    healthcheck:
      test: curl -s localhost:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 20s
      retries: 50
